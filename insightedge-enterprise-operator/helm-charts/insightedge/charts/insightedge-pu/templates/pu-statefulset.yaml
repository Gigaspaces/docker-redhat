{{- $root := . -}}

{{if and ($root.Values.partitions) ($root.Values.instances)}}
{{fail "Please use only one - partitions or instances"}}
{{end}}

{{if and ($root.Values.ha) (empty $root.Values.partitions)}}
{{fail "Please define partitions when using HA"}}
{{end}}

{{if and ($root.Values.instances) ($root.Values.antiAffinity.enabled)}}
{{fail "Using instances with anti-affinity is not supported"}}
{{end}}

{{$yamlCount := empty ($root.Values.partitions) | ternary 1 $root.Values.partitions  }}
{{ range $k, $v := until (int ($yamlCount)) }}
---
{{$partitionId:=(add1 $v)}}
{{$suffix:=cat "-" $partitionId | nospace}}
{{$podSuffix := empty ($root.Values.partitions) | ternary "" $suffix }}
{{$haCount:= (and (not (empty $root.Values.ha)) $root.Values.ha) | ternary 2 1 }}
{{$replicaCount:= empty ($root.Values.instances) | ternary $haCount $root.Values.instances }}
{{$externalLrmiEnabled:= $root.Values.service.lrmi.enabled}}
---
{{if $externalLrmiEnabled}}
apiVersion: v1
kind: Service
metadata:
  name: {{ template "insightedge-pu.fullname" $ }}{{$podSuffix}}-0-service
  labels:
    app: {{ template "insightedge-pu.name" $ }}
    chart: {{ template "insightedge-pu.chart" $ }}
    release: {{ $root.Release.Name }}
    heritage: {{ $root.Release.Service }}
spec:
  type: {{ $root.Values.service.type }}
  selector:
    statefulset.kubernetes.io/pod-name: {{ template "insightedge-pu.fullname" $ }}{{$podSuffix}}-0
    app: {{ template "insightedge-pu.name" $ }}
    selectorId: {{ template "insightedge-pu.fullname" $ }}{{$podSuffix}}
    partitionId: {{$partitionId | quote }}
  ports:
    - name: lrmi
      protocol: TCP
      port: {{$root.Values.service.lrmi.port}}
      {{if $root.Values.service.lrmi.initialNodePort}}
      nodePort: {{add $root.Values.service.lrmi.initialNodePort (mul (sub $partitionId 1) 2)}}
      {{end}}
{{end}}
---
{{if $externalLrmiEnabled}}
{{if $root.Values.ha}}
apiVersion: v1
kind: Service
metadata:
  name: {{ template "insightedge-pu.fullname" $ }}{{$podSuffix}}-1-service
  labels:
    app: {{ template "insightedge-pu.name" $ }}
    chart: {{ template "insightedge-pu.chart" $ }}
    release: {{ $root.Release.Name }}
    heritage: {{ $root.Release.Service }}
spec:
  type: {{ $root.Values.service.type }}
  selector:
    statefulset.kubernetes.io/pod-name: {{ template "insightedge-pu.fullname" $ }}{{$podSuffix}}-1
    app: {{ template "insightedge-pu.name" $ }}
    selectorId: {{ template "insightedge-pu.fullname" $ }}{{$podSuffix}}
    partitionId: {{$partitionId | quote }}
  ports:
    - name: lrmi
      protocol: TCP
      port: {{$root.Values.service.lrmi.port}}
      {{if $root.Values.service.lrmi.initialNodePort}}
      nodePort: {{add (add1 $root.Values.service.lrmi.initialNodePort) (mul (sub $partitionId 1) 2)}}
      {{end}}
{{end}}
{{end}}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "insightedge-pu.fullname" $ }}{{$podSuffix}}
  labels:
    app: {{ template "insightedge-pu.name" $ }}
    chart: {{ template "insightedge-pu.chart" $ }}
    release: {{ $root.Release.Name }}
    heritage: {{ $root.Release.Service }}
#statefulset spec
spec:
  replicas: {{$replicaCount}}
  selector:
    matchLabels:
      selectorId: {{ template "insightedge-pu.fullname" $ }}{{$podSuffix}}
  template:
    metadata:
      labels:
        app: {{ template "insightedge-pu.name" $ }}
        release: {{ $root.Release.Name }}
        component: space
        selectorId: {{ template "insightedge-pu.fullname" $ }}{{$podSuffix}}
        partitionId: {{$partitionId | quote }}
    #pods spec
    spec:
      initContainers:
        - name: check-manager-ready
          image: "{{ $root.Values.image.repository }}"
          command: ["tools/kubernetes/entrypoint.sh"]
          args:
            - "component=init"
            - "verbose=true"
            - "name={{ $root.Release.Name }}"
            {{ if ($root.Values.license) }}- "license={{ $root.Values.license}}"{{- end }}
            {{ if ($root.Values.manager.name) }}- "manager.name={{$root.Values.manager.name}}"{{- end }}
            {{ if ($root.Values.manager.ports.api) }}- "manager.ports.api={{$root.Values.manager.ports.api}}"{{- end }}
            {{ if ($root.Values.manager.discoveryTimeoutSeconds) }}- "manager.discoveryTimeoutSeconds={{$root.Values.manager.discoveryTimeoutSeconds}}"{{- end }}
        {{- if $externalLrmiEnabled}}
        - name: check-external-service-ready
          image: "{{ $root.Values.image.repository }}"
          command: ["tools/kubernetes/entrypoint.sh"]
          args:
            - "component=init-pu-external-service"
            - "verbose=true"
            - "release.namespace={{ $root.Release.Namespace }}"
        {{- end}}
      terminationGracePeriodSeconds: {{ $root.Values.terminationGracePeriodSeconds }}
      {{- with $root.Values.antiAffinity }}
      {{- if ($root.Values.antiAffinity.enabled) }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: selectorId
                    operator: In
                    values:
                      - {{ template "insightedge-pu.fullname" $ }}{{$podSuffix}}
              topologyKey: "kubernetes.io/hostname"
      {{- end }}
      {{- end }}
      containers:
        - name: pu-container
          resources:
{{ toYaml $root.Values.resources | indent 12 }}
          image: "{{ $root.Values.image.repository }}"
          imagePullPolicy: {{ $root.Values.image.pullPolicy }}
          env:
          - name: GS_OPTIONS_EXT
            value: "{{$root.Values.java.options}}"
          command: ["tools/kubernetes/entrypoint.sh"]
          args:
            - "component=pu"
            - "verbose=true"
            - "name={{ $root.Release.Name }}"
            - "release.namespace={{ $root.Release.Namespace }}"
            {{- if $externalLrmiEnabled}}
            - "external.lrmi.enabled=true"
            - "lrmi.port={{ $root.Values.service.lrmi.port }}"
            {{- end}}
            {{- if ($root.Values.license) }}
            - "license={{ $root.Values.license}}"
            {{- end }}
            {{- if ($root.Values.schema) }}
            - "schema={{ $root.Values.schema}}"
            {{- end }}
            {{- if ($root.Values.instances) }}
            - "instances={{ $root.Values.instances}}"
            {{- end }}
            {{- if ($root.Values.partitions) }}
            - "partitions={{ $root.Values.partitions}}"
            {{- end }}
            {{- if ($root.Values.ha) }}
            - "ha={{ $root.Values.ha}}"
            {{- end }}
            - "partitionId={{$partitionId}}"
            {{- if ($root.Values.java.heap) }}
            - "java.heap={{ $root.Values.java.heap}}"
            {{- end }}
            {{- if ($root.Values.manager.name) }}
            - "manager.name={{$root.Values.manager.name}}"
            {{- end }}
            {{- if ($root.Values.manager.ports.api) }}
            - "manager.ports.api={{$root.Values.manager.ports.api}}"
            {{- end }}
            {{- if ($root.Values.resourceUrl) }}
            - "pu.resourceUrl={{$root.Values.resourceUrl}}"
            {{- end }}
            {{- if ($root.Values.properties) }}
            - "pu.properties={{$root.Values.properties}}"
            {{- end }}
          {{- if ($root.Values.livenessProbe.enabled) }}
          livenessProbe:
            httpGet:
              path: /probes/alive
              port: 8089
            initialDelaySeconds: {{$root.Values.livenessProbe.initialDelaySeconds}}
            periodSeconds: {{$root.Values.livenessProbe.periodSeconds}}
            failureThreshold: {{$root.Values.livenessProbe.failureThreshold}}
          {{- end }}
          {{- if ($root.Values.readinessProbe.enabled) }}
          readinessProbe:
            httpGet:
              path: /probes/ready
              port: 8089
            initialDelaySeconds: {{$root.Values.readinessProbe.initialDelaySeconds}}
            periodSeconds: {{$root.Values.readinessProbe.periodSeconds}}
            failureThreshold: {{$root.Values.readinessProbe.failureThreshold}}
          {{- end }}
          {{- if ($root.Values.memoryXtendVolume.enabled) }}
          volumeMounts:
          {{- if (empty $root.Values.memoryXtendVolume.volumeMount.name) }}
          {{- fail "Volume mount name must be supplied!" }}
          {{- end}}
          - name: {{$root.Values.memoryXtendVolume.volumeMount.name}}
          {{- if (empty $root.Values.memoryXtendVolume.volumeMount.mountPath) }}
          {{- fail "Volume mount path must be supplied!" }}
          {{- end }}
            mountPath: {{$root.Values.memoryXtendVolume.volumeMount.mountPath}}
          {{- end }}
  {{- if ($root.Values.memoryXtendVolume.enabled) }}
  volumeClaimTemplates:
  - metadata:
      name: {{$root.Values.memoryXtendVolume.volumeMount.name}}
    spec:
      accessModes:
      - {{ $root.Values.memoryXtendVolume.volumeClaimTemplate.accessModes }}
      {{- if $root.Values.memoryXtendVolume.volumeClaimTemplate.storageClassName }}
      storageClassName: {{ $root.Values.memoryXtendVolume.volumeClaimTemplate.storageClassName }}
      {{- end }}
      persistentVolumeReclaimPolicy: {{ $root.Values.memoryXtendVolume.volumeClaimTemplate.persistentVolumeReclaimPolicy }}
      {{- if (empty $root.Values.memoryXtendVolume.volumeClaimTemplate.storage) }}
      {{- fail "Storage size must be supplied to the volume claim template" }}
      {{- end}}
      resources:
        requests:
          storage: {{ $root.Values.memoryXtendVolume.volumeClaimTemplate.storage }}
  {{- end }}

{{ end }}
